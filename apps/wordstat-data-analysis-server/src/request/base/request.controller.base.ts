/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RequestService } from "../request.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RequestCreateInput } from "./RequestCreateInput";
import { Request } from "./Request";
import { RequestFindManyArgs } from "./RequestFindManyArgs";
import { RequestWhereUniqueInput } from "./RequestWhereUniqueInput";
import { RequestUpdateInput } from "./RequestUpdateInput";
import { SearchResultFindManyArgs } from "../../searchResult/base/SearchResultFindManyArgs";
import { SearchResult } from "../../searchResult/base/SearchResult";
import { SearchResultWhereUniqueInput } from "../../searchResult/base/SearchResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RequestControllerBase {
  constructor(
    protected readonly service: RequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Request })
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRequest(
    @common.Body() data: RequestCreateInput
  ): Promise<Request> {
    return await this.service.createRequest({
      data: {
        ...data,

        keyword: data.keyword
          ? {
              connect: data.keyword,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        requestedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Request] })
  @ApiNestedQuery(RequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async requests(@common.Req() request: Request): Promise<Request[]> {
    const args = plainToClass(RequestFindManyArgs, request.query);
    return this.service.requests({
      ...args,
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        requestedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async request(
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Request | null> {
    const result = await this.service.request({
      where: params,
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        requestedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRequest(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() data: RequestUpdateInput
  ): Promise<Request | null> {
    try {
      return await this.service.updateRequest({
        where: params,
        data: {
          ...data,

          keyword: data.keyword
            ? {
                connect: data.keyword,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          keyword: {
            select: {
              id: true,
            },
          },

          requestedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRequest(
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Request | null> {
    try {
      return await this.service.deleteRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,

          keyword: {
            select: {
              id: true,
            },
          },

          requestedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/searchResults")
  @ApiNestedQuery(SearchResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SearchResult",
    action: "read",
    possession: "any",
  })
  async findSearchResults(
    @common.Req() request: Request,
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<SearchResult[]> {
    const query = plainToClass(SearchResultFindManyArgs, request.query);
    const results = await this.service.findSearchResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        request: {
          select: {
            id: true,
          },
        },

        resultData: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/searchResults")
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "update",
    possession: "any",
  })
  async connectSearchResults(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: SearchResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      searchResults: {
        connect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/searchResults")
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "update",
    possession: "any",
  })
  async updateSearchResults(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: SearchResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      searchResults: {
        set: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/searchResults")
  @nestAccessControl.UseRoles({
    resource: "Request",
    action: "update",
    possession: "any",
  })
  async disconnectSearchResults(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: SearchResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      searchResults: {
        disconnect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
